= Generate your Java backend code with devonfw

CobiGen is a generic incremental code generator for end to end code generation tasks. It allows you to build Java, Angular CRUD application code based on the devonfw architecture including all software layers. 


#
## Prerequisites

* User should have Java development experience


#
## Learning goals

* After completing this scenario, you will have learned how to generate an end-to-end Java CRUD application code using devonfw CobiGen.

More information about CobiGen on https://devonfw.com/website/pages/docs/master-cobigen.asciidoc.html



The definition of each step of this tutorial can be found at https://github.com/devonfw-tutorials/tutorials/tree/main/cobigen/. 

Feel free to report any errors to us or fix them yourself. Errors can be reported by creating an issue in the https://github.com/devonfw-tutorials/tutorials/issues[tutorials repository]. To fix the error fork the repository and create a pull request. Errors in the wiki can be reported and fixed in the https://github.com/devonfw-tutorials/tutorial-compiler[Tutorial-compiler repository].
You can find a description of what to look for when creating a pull request at the devonfw contribution guide: https://devonfw.com/website/pages/community/community.html#community.asciidoc_contributing-to-devonfw. If you want to create a tutorial you can start with the https://katacoda.com/devonfw/scenarios/create-your-own-tutorial[katacoda tutorial] and read the description for creating your own tutorials: https://github.com/devonfw-tutorials/tutorials/wiki/Development.



=== devonfw setup



If you already installed the devonfw IDE, you can skip this step.

==== Prerequisites

* You need to have a tool to extract `.tar.gz` files. On Windows lower Windows 10 use can use https://www.7-zip.org/7-zip[7-Zip]. The most other platforms support this feature by default.
* You need to have https://git-scm.com/[Git] and https://curl.se/[Curl] installed. On Windows you have to install https://git-scm.com/download/win[Git for Windows]. On Linux systems you might need to install the following tools in case they are not present (`sudo apt-get install git curl` or `sudo yum install git-core curl`)

Create a new directory in the location where you want to install the devonfw IDE. If you are using the terminal, navigate to this location and run `mkdir devonfw` and `cd devonfw` to create the directory and navigate into it.

==== Download



Now you have to download the latest release of the devonfw IDE. You can download it from https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.devonfw.tools.ide&a=devonfw-ide-scripts&v=LATEST&p=tar.gz[here].

In the Terminal execute `Invoke-WebRequest -OutFile devonfw-ide-scripts.tar.gz 'https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.devonfw.tools.ide&a=devonfw-ide-scripts&v=LATEST&p=tar.gz'` if you are using Windows.

On Linux use `wget -c 'https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.devonfw.tools.ide&a=devonfw-ide-scripts&v=LATEST&p=tar.gz' -O devonfw-ide-scripts.tar.gz -`.

On MacOS, depending on your setup, you can either use the same `wget` command specified for the Linux installation (install wget via homebrew `brew install wget`) or use any other available download command i.e. `curl -o devonfw-ide-scripts.tar.gz https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.devonfw.tools.ide&a=devonfw-ide-scripts&v=LATEST&p=tar.gz`.



After that you need to extract the downloaded file. To do this, run `tar -xvzf devonfw-ide-scripts.tar.gz`. Or you can simply use a tool (e.g. 7-Zip) for this.

==== Setup

First, you need to prepare a settings repository to specify the tools to be installed within the devonfw IDE. Normally this is done by your project. If you just want to test the devonfw IDE, you can use the default URL, which is https://github.com/devonfw/ide-settings.

For now clone the repository on https://github.com/devonfw/ide-settings or your own fork of it.
For this tutorial you have to write `DEVON_IDE_TOOLS=(java mvn)` into the devon.properties file of the cloned settings repository. These settings will now be passed into the installation process of the devonfw-ide.
Start the setup process by executing `.\setup 'path/to/settings'` (Windows) or `bash setup path/to/settings.git` (Linux).

You can also just execute `.\setup` (Windows) or `bash setup` (Linux) and press Enter when the setup assistent asks for the URL to the settings repository. This will also download the default settings and install the default tools within the devonfw IDE.


The installer will also ask you if you want to enter secrets for your maven repository. You can simply skip this by pressing 'Enter'.
 





=== Create a new devon4j project from command prompt

==== Prerequisites

In order to create a new application you must use the archetype provided by devon4j which uses the https://maven.apache.org/guides/introduction/introduction-to-archetypes.html[maven archetype functionality].

To create a new application, you should have installed devonfw-ide. Follow the https://devonfw.com/website/pages/docs/devonfw-ide-introduction.asciidoc.html[devonfw-ide] documentation to install the same.

==== Create the project

Now you can use devonfw to setup a java project for you by executing the following devon command in terminal.

`devon java create com.example.application.cobigenexample`

There is also is also an alternative way, where you can customize the project setup with optional parameters. More informations you will find https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html[here].

==== What is generated?

The application template (archetype) generates a Maven multi-module project. It has the following modules:

- *api*: module with the API (REST service interfaces, transfer-objects, datatypes, etc.) to be imported by other apps as a maven dependency in order to invoke and consume the offered (micro)services.

- *core*: maven module containing the core of the application.

- *batch*: optional module for batch(es)

- *server*: module that bundles the entire app (core with optional batch) as a WAR file.

- *ear*: optional maven module is responsible to packaging the application as a EAR file.

The toplevel pom.xml of the generated project has the following features:

- Properties definition: Spring-boot version, Java version, etc.

- Modules definition for the modules (described above)

- Dependency management: define versions for dependencies of the technology stack that are recommended and work together in a compatible way.

- Maven plugins with desired versions and configuration

- Profiles for https://devonfw.com/website/pages/docs/devon4j.asciidoc_guides.html#guide-testing.asciidoc[test stages]





=== Create the file CustomerEntity.java

Create the entity class which will be passed to the cobigen cli generator later


==== Prerequisites
* Existing folder you want to create the file. (If the folder doesn't exist you can create it from with the editor).
* Any Editor that can edit files

==== Creating CustomerEntity.java in any Editor

Create CustomerEntity.java in any Editor and insert the following data into it. .

Opening a new file can be done by going to the file context menu in the top left corner of the editor and select *New* or *New File* or mostly also the keyboard shortcut ctrl+n will also work.
The editor opens a new editor window for an untitled file that can be edited now.
 
Copy the following text.
[source, java]
----
package com.example.application.cobigenexample.customermanagement.dataaccess.api;

import java.sql.Timestamp;

import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table(name = "Customer")
public class CustomerEntity {

  private String firstname;

  private String lastname;

  private int age;

  /**
   * @return the firstname
   */
  public String getFirstname() {
    return firstname;
  }

  /**
   * @param firstname the firstname to set
   */
  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  /**
   * @return the lastname
   */
  public String getLastname() {
    return lastname;
  }

  /**
   * @param lastname the lastname to set
   */
  public void setLastname(String lastname) {
    this.lastname = lastname;
  }

  /**
   * @return the age
   */
  public int getAge() {
    return age;
  }

  /**
   * @param age the age to set
   */
  public void setAge(int age) {
    this.age = age;
  }

}
---- 
Now insert the copied text into the new file.

The next step is to save the file by selecting *Save* or *Save as* in the file context menu or by using the keyboard shortcut ctrl+s.
A file explorer window opens.
You should check if you are currently in the right directory where you want to save *devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/CustomerEntity.java*. 
Select the directory `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api`. If the directory does not exist, create the missing folders or run through the previous steps from the wiki again.
To save the file specify the name of the file. Paste `CustomerEntity.java` in the text field *File name:*. 
The last step is to save the file with the *Save* button in the bottom right corner and CustomerEntity.java has been created and filled with some data.




=== Build the Java Project with Maven
Now Build the java project


==== Prerequisites

* You need to have Maven installed. If not already installed, you can download it https://maven.apache.org/download.cgi[here]. Alternativly, you can make use of the devonfw-ide, where you can install Maven directly to your workspace. For more details on how to do that, see the https://devonfw.com/website/pages/docs/devonfw-ide-introduction.asciidoc.html#setup.asciidoc[devonfw-ide setup].

==== Execution

Now move to your project directory manually or by executing `cd C:\devonfw\workspaces\main\tutorial-compiler\build\working\devonfw\workspaces\main\cobigenexample` in the terminal.
Next, use the following command to build the java project.

`mvn clean install -Dmaven.test.skip=true`

The maven command 'clean' will clear the target directory beforehand. So your build will start from a clean state.
Install will then compile, test and package your Java project and copy your built .jar/.war file into your local Maven repository.

We do not need to execute the test cases, so we can skip them by using the option '-Dmaven.test.skip=true'.




== Change Entity and run cobigen again
Furthermore, we can change the CustomerEntity afterwards and update our source files simply by running cobigen again.


==== Prerequisites
* Any editor that can edit files

==== Changing of CustomerEntity.java in any Editor


To change the file CustomerEntity.java, you have to open it in any editor. 
Open the editor and choose in the file context menu in the top left corner *Open ...* mostly also keyboard shortcut ctrl+o works. 
Based on your operating system a window with the file explorer opens. You have to navigate to CustomerEntity.java and select it.  Select the right folder manually by selecting the folders from the path `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api` and select the file `CustomerEntity.java`. 
You confirm this with the *Open* button in the bottom right corner CustomerEntity.java will be opened in a new editor window.

Copy the following text.
[source, java]
----
private int age;
private String company;

public String getCompany() {
    return company;
}
public void setCompany(String company) {
    this.company = company;
}
----


To replace the content with a specific placeholder you have to locate the placeholder in the file. The fastest way is to search through the opened file and replace *private int age;* with the new content.

The final step is to save the file by selecting *Save* in the file context menu or by using the keyboard shortcut ctrl+s and CustomerEntity.java has been changed.



